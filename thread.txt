@thread API

@create new thread

#include <thread.h>
int thread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg)

-param
- thread: return param, handle when create a new thread successed.
-   attr: set the thread attrbute.
-    arg: imput param to new thread.
- start_routine: entry func of new thread.

-return value
-	    0: successed
- othread: Error code 

@get thread ID

#include <thread.h>
pthread_t pthread_self(void);

-return value
- value:  thread ID

@ thread ID is equal?
#include <pthread.h>
int pthread_equal(pthread_t t1, pthread_t t2);

-return value
-     0: euqal
- other: not equal

@exit thread

#include <thread.h>
void pthread_exit(void *retval);

@manage the thread

#include <thread.h>
int pthread_join(pthread_t thread, void **retval);

-param
- thread(input): thread for waiting.
- retval(output): return value of Entry func or pthread_exit's param.

-return value
- 0: sucessed
- othrer: Error code

@thread detach

#include <thread.h>
int pthread_detach(pthread_t thead);

-param
- thead: object thread

-return value
- 0: successed
- othread: Error Code

